{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\ncontroller_1 = Controller(PRIMARY)\ndistance_1 = Distance(Ports.PORT1)\ndistance_10 = Distance(Ports.PORT10)\nmotor_2 = Motor(Ports.PORT2, GearSetting.RATIO_36_1, False)\nmotor_3 = Motor(Ports.PORT3, GearSetting.RATIO_18_1, False)\nleft_motors_motor_a = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nleft_motors_motor_b = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nleft_motors = MotorGroup(left_motors_motor_a, left_motors_motor_b)\nright_motors_motor_a = Motor(Ports.PORT19, GearSetting.RATIO_18_1, True)\nright_motors_motor_b = Motor(Ports.PORT20, GearSetting.RATIO_18_1, True)\nright_motors = MotorGroup(right_motors_motor_a, right_motors_motor_b)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       Hillcrest Robotics software(Sudhir)\n#\tCreated:\n#\tDescription: vex V5 manual code\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\ndead_band = 14\n# Begin project code\n#Arm Up-Down code\ndef Amovement():\n    if controller_1.axis4.position() <= 2:\n        motor_2.set_velocity(controller_1.axis4.position(),PERCENT)\n        motor_2.spin(FORWARD)\n        wait(3,MSEC)\n    elif controller_1.axis4.position() >= 2:\n        motor_2.set_velocity(1,PERCENT)\n        motor_2.spin(FORWARD)\n        wait(3,MSEC)\ncontroller_1.axis4.changed(Amovement)\nwait(5,MSEC)\n\nwhile True:\n        \n        #Claw Up down\n        if controller_1.buttonR1.pressing():\n            motor_3.set_max_torque(100,PERCENT)\n            motor_3.set_velocity(5, PERCENT)\n            motor_3.spin_for(FORWARD, 20, DEGREES)\n            motor_3.stop()\n            wait(5,MSEC)\n        if controller_1.buttonR2.pressing():\n            motor_3.set_max_torque(100,PERCENT)\n            motor_3.set_velocity(5, PERCENT)\n            motor_3.spin_for(REVERSE, 20, DEGREES)\n            motor_3.stop()\n            wait(5,MSEC)\n\n        #Claw Open\n        axis_3_pos = controller_1.axis3.position()\n        axis_2_pos = controller_1.axis2.position()\n        if controller_1.buttonR1.pressing():\n            motor_3.set_max_torque(100,PERCENT)\n            motor_3.set_velocity(5, PERCENT)\n            motor_3.spin_for(FORWARD, 10, DEGREES)\n            motor_3.stop()\n            wait(5,MSEC)\n        if controller_1.buttonR2.pressing():\n            motor_3.set_max_torque(100,PERCENT)\n            motor_3.set_velocity(5, PERCENT)\n            motor_3.spin_for(REVERSE, 10, DEGREES)\n            motor_3.stop()\n            wait(5,MSEC)\n        #Drive\n        if abs(axis_3_pos) + abs(axis_2_pos) > dead_band:\n            left_motors_motor_a.set_velocity((axis_3_pos),PERCENT)\n            left_motors_motor_b.set_velocity((axis_3_pos),PERCENT)\n            controller_1.screen.print(axis_3_pos)\n\n            right_motors_motor_a.set_velocity((axis_2_pos), PERCENT)\n            right_motors_motor_b.set_velocity((axis_2_pos), PERCENT)\n            controller_1.screen.print(axis_2_pos)\n            wait(5,MSEC)\n        \n\n        else:\n            left_motors.set_velocity(0, PERCENT)\n            right_motors.set_velocity(0, PERCENT)\n\n            left_motors_motor_a.spin(FORWARD)\n            left_motors_motor_b.spin(FORWARD)\n\n            right_motors_motor_a.spin(FORWARD)\n            right_motors_motor_b.spin(FORWARD)\n\n            wait(5, MSEC)","textLanguage":"python","rconfig":[{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[1],"name":"distance_1","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[10],"name":"distance_10","customName":false,"deviceType":"Distance","deviceClass":"distance","setting":{"id":"partner"},"triportSourcePort":22},{"port":[2],"name":"motor_2","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio36_1"},"triportSourcePort":22},{"port":[3],"name":"motor_3","customName":false,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1","id":"partner"},"triportSourcePort":22},{"port":[11,12],"name":"left_motors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"false","motor_b_reversed":"false","id":"partner"},"triportSourcePort":22},{"port":[19,20],"name":"right_motors","customName":true,"deviceType":"MotorGroup","deviceClass":"motor_group","setting":{"fwd":"forward","rev":"reverse","gear":"ratio18_1","motor_a_reversed":"true","motor_b_reversed":"true"},"triportSourcePort":22}],"slot":1,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"3.0.4","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}